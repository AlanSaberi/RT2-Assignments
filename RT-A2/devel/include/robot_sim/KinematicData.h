// Generated by gencpp from file robot_sim/KinematicData.msg
// DO NOT EDIT!


#ifndef ROBOT_SIM_MESSAGE_KINEMATICDATA_H
#define ROBOT_SIM_MESSAGE_KINEMATICDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_sim
{
template <class ContainerAllocator>
struct KinematicData_
{
  typedef KinematicData_<ContainerAllocator> Type;

  KinematicData_()
    : distance(0.0)
    , vel_x_avrg(0.0)
    , vel_y_avrg(0.0)  {
    }
  KinematicData_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , vel_x_avrg(0.0)
    , vel_y_avrg(0.0)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;

   typedef float _vel_x_avrg_type;
  _vel_x_avrg_type vel_x_avrg;

   typedef float _vel_y_avrg_type;
  _vel_y_avrg_type vel_y_avrg;





  typedef boost::shared_ptr< ::robot_sim::KinematicData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_sim::KinematicData_<ContainerAllocator> const> ConstPtr;

}; // struct KinematicData_

typedef ::robot_sim::KinematicData_<std::allocator<void> > KinematicData;

typedef boost::shared_ptr< ::robot_sim::KinematicData > KinematicDataPtr;
typedef boost::shared_ptr< ::robot_sim::KinematicData const> KinematicDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_sim::KinematicData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_sim::KinematicData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_sim::KinematicData_<ContainerAllocator1> & lhs, const ::robot_sim::KinematicData_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.vel_x_avrg == rhs.vel_x_avrg &&
    lhs.vel_y_avrg == rhs.vel_y_avrg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_sim::KinematicData_<ContainerAllocator1> & lhs, const ::robot_sim::KinematicData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_sim::KinematicData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_sim::KinematicData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_sim::KinematicData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_sim::KinematicData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_sim::KinematicData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_sim::KinematicData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_sim::KinematicData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9801d782b5cb7db4871c31b5d325e5f8";
  }

  static const char* value(const ::robot_sim::KinematicData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9801d782b5cb7db4ULL;
  static const uint64_t static_value2 = 0x871c31b5d325e5f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_sim::KinematicData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_sim/KinematicData";
  }

  static const char* value(const ::robot_sim::KinematicData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_sim::KinematicData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 distance\n"
"float32 vel_x_avrg\n"
"float32 vel_y_avrg\n"
;
  }

  static const char* value(const ::robot_sim::KinematicData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_sim::KinematicData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.vel_x_avrg);
      stream.next(m.vel_y_avrg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KinematicData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_sim::KinematicData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_sim::KinematicData_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "vel_x_avrg: ";
    Printer<float>::stream(s, indent + "  ", v.vel_x_avrg);
    s << indent << "vel_y_avrg: ";
    Printer<float>::stream(s, indent + "  ", v.vel_y_avrg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SIM_MESSAGE_KINEMATICDATA_H
